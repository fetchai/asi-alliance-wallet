import { ApolloClient, gql, InMemoryCache, split } from "@apollo/client";
import {
  getMainDefinition,
  ObservableSubscription,
} from "@apollo/client/utilities";
import { GroupDetails, PublicKeyDetails } from "@chatTypes";
import { store } from "@chatStore/index";
import { setMessageError } from "@chatStore/messages-slice";
import { client, createWSLink, httpLink } from "./client";
import {
  Group,
  listenGroups,
  UpdateGroupLastSeen,
  UpdatePublicKey,
} from "./groups-queries";
let querySubscription: ObservableSubscription;

export const updatePublicKey = async (publicKeyDetails: PublicKeyDetails) => {
  const state = store.getState();
  const { data, errors } = await client.mutate({
    mutation: gql(UpdatePublicKey),
    fetchPolicy: "no-cache",
    context: {
      headers: {
        Authorization: `Bearer ${state.user.accessToken}`,
      },
    },
    variables: {
      publicKeyDetails,
    },
  });

  if (errors) console.log("errors", errors);
  return data.updatePublicKey;
};

export const createGroup = async (groupDetails: GroupDetails) => {
  const state = store.getState();

  try {
    const { data, errors } = await client.mutate({
      mutation: gql(Group),
      fetchPolicy: "no-cache",
      context: {
        headers: {
          Authorization: `Bearer ${state.user.accessToken}`,
        },
      },
      variables: { groupDetails },
    });
    if (errors) {
      store.dispatch(
        setMessageError({
          type: "Group",
          message: errors || "Something went wrong, Group can't be created",
          level: 1,
        })
      );
      return null;
    }
    return data.group;
  } catch (e: any) {
    store.dispatch(
      setMessageError({
        type: "Group",
        message: e?.message || "Something went wrong, Group can't be created",
        level: 1,
      })
    );
    return null;
  }
};

//already generated by vinay
export const updateGroupLastSeen = async (
  groupId: string,
  lastSeenTimestamp: string
) => {
  const state = store.getState();
  const { data, errors } = await client.mutate({
    mutation: gql(UpdateGroupLastSeen),
    fetchPolicy: "no-cache",
    context: {
      headers: {
        Authorization: `Bearer ${state.user.accessToken}`,
      },
    },
    variables: { groupId, lastSeenTimestamp },
  });
  if (errors) console.log("errors", errors);
  return data.updateGroupLastSeen;
};

export const groupsListener = () => {
  const state = store.getState();
  const wsLink = createWSLink(state.user.accessToken);
  const splitLink = split(
    ({ query }) => {
      const definition = getMainDefinition(query);
      return (
        definition.kind === "OperationDefinition" &&
        definition.operation === "subscription"
      );
    },
    wsLink,
    httpLink
  );
  const newClient = new ApolloClient({
    link: splitLink,
    cache: new InMemoryCache(),
  });
  querySubscription = newClient
    .subscribe({
      query: gql(listenGroups),
      context: {
        headers: {
          authorization: `Bearer ${state.user.accessToken}`,
        },
      },
    })
    .subscribe({
      next() {},
      error(err) {
        console.error("err", err);
        store.dispatch(
          setMessageError({
            type: "subscription",
            message: "Something went wrong, Cant fetch latest messages",
            level: 1,
          })
        );
      },
      complete() {
        console.log("completed");
      },
    });
};

export const groupsListenerUnsubscribe = () => {
  if (querySubscription) querySubscription.unsubscribe();
};
